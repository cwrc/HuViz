"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_rdf_resolve_hypermedia_1 = require("@comunica/bus-rdf-resolve-hypermedia");
const bus_rdf_resolve_quad_pattern_1 = require("@comunica/bus-rdf-resolve-quad-pattern");
/**
 * A comunica QPF RDF Resolve Quad Pattern Actor.
 */
class ActorRdfResolveHypermediaQpf extends bus_rdf_resolve_hypermedia_1.ActorRdfResolveHypermedia {
    constructor(args) {
        super(args);
    }
    async test(action) {
        if (!(action.context.get(bus_rdf_resolve_quad_pattern_1.KEY_CONTEXT_SOURCE).type === "hypermedia")) {
            throw new Error(this.name
                + ' requires a single source with a Hypermedia \'hypermedia\' entrypoint to be present in the context.');
        }
        if (!action.metadata || !action.metadata.searchForms) {
            throw new Error(`${this.name} requires metadata and searchForms to work on.`);
        }
        return true;
    }
    /**
     * Look for the search form
     * @param {IActionRdfResolveHypermedia} the metadata to look for the form.
     * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.
     */
    async run(action) {
        // Find a quad pattern or triple pattern search form
        const searchForms = action.metadata.searchForms;
        // TODO: in the future, a query-based search form getter should be used.
        for (const searchForm of searchForms.values) {
            if (this.graphUri
                && this.subjectUri in searchForm.mappings
                && this.predicateUri in searchForm.mappings
                && this.objectUri in searchForm.mappings
                && this.graphUri in searchForm.mappings
                && Object.keys(searchForm.mappings).length === 4) {
                return { searchForm };
            }
            if (this.subjectUri in searchForm.mappings
                && this.predicateUri in searchForm.mappings
                && this.objectUri in searchForm.mappings
                && Object.keys(searchForm.mappings).length === 3) {
                return { searchForm };
            }
        }
        throw new Error('No valid Hydra search form was found for quad pattern or triple pattern queries.');
    }
}
exports.ActorRdfResolveHypermediaQpf = ActorRdfResolveHypermediaQpf;
//# sourceMappingURL=ActorRdfResolveHypermediaQpf.js.map