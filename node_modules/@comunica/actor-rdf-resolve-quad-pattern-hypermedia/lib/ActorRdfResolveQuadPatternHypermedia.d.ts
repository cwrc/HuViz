import { ISearchForm } from "@comunica/actor-rdf-metadata-extract-hydra-controls";
import { IActionRdfDereferencePaged, IActorRdfDereferencePagedOutput } from "@comunica/bus-rdf-dereference-paged";
import { IActionRdfResolveHypermedia, IActorRdfResolveHypermediaOutput } from "@comunica/bus-rdf-resolve-hypermedia";
import { ActorRdfResolveQuadPatternSource, IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternOutput, ILazyQuadSource } from "@comunica/bus-rdf-resolve-quad-pattern";
import { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from "@comunica/core";
import * as RDF from "rdf-js";
/**
 * A comunica Hypermedia RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveQuadPatternHypermedia extends ActorRdfResolveQuadPatternSource implements IActorRdfResolveQuadPatternHypermediaArgs {
    readonly mediatorRdfDereferencePaged: Mediator<Actor<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>, IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>;
    readonly mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;
    readonly subjectUri: string;
    readonly predicateUri: string;
    readonly objectUri: string;
    readonly graphUri?: string;
    protected sources: {
        [hypermedia: string]: Promise<RDF.Source>;
    };
    constructor(args: IActorRdfResolveQuadPatternHypermediaArgs);
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    /**
     * Choose a Hypermedia hypermedia form.
     * @param {string} hypermedia A hypermedia URL.
     * @param {ActionContext} context An optional context.
     * @return {Promise<ISearchForm>} A promise resolving to a hypermedia form.
     */
    protected chooseForm(hypermedia: string, context: ActionContext): Promise<ISearchForm>;
    protected createSource(context: ActionContext): Promise<ILazyQuadSource>;
    protected getSource(context: ActionContext): Promise<ILazyQuadSource>;
    protected getOutput(source: RDF.Source, pattern: RDF.Quad, context: ActionContext): Promise<IActorRdfResolveQuadPatternOutput>;
}
export interface IActorRdfResolveQuadPatternHypermediaArgs extends IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {
    mediatorRdfDereferencePaged: Mediator<Actor<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>, IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>;
    mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;
    subjectUri: string;
    predicateUri: string;
    objectUri: string;
    graphUri?: string;
}
