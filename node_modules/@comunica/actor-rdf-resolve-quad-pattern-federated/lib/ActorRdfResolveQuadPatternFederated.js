"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_rdf_resolve_quad_pattern_1 = require("@comunica/bus-rdf-resolve-quad-pattern");
const FederatedQuadSource_1 = require("./FederatedQuadSource");
/**
 * A comunica Federated RDF Resolve Quad Pattern Actor.
 */
class ActorRdfResolveQuadPatternFederated extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {
    constructor(args) {
        super(args);
        this.emptyPatterns = new Map();
    }
    async test(action) {
        const sources = this.getContextSources(action.context);
        if (!sources) {
            throw new Error('Actor ' + this.name + ' can only resolve quad pattern queries against a sources array.');
        }
        return true;
    }
    async getSource(context) {
        return new FederatedQuadSource_1.FederatedQuadSource(this.mediatorResolveQuadPattern, context, this.emptyPatterns, this.skipEmptyPatterns);
    }
    async getOutput(source, pattern, context) {
        // Attach metadata to the output
        const output = await super.getOutput(source, pattern, context);
        output.metadata = () => new Promise((resolve, reject) => {
            output.data.on('error', reject);
            output.data.on('end', () => reject(new Error('No metadata was found')));
            output.data.on('metadata', (metadata) => {
                resolve(metadata);
            });
        });
        return output;
    }
}
exports.ActorRdfResolveQuadPatternFederated = ActorRdfResolveQuadPatternFederated;
//# sourceMappingURL=ActorRdfResolveQuadPatternFederated.js.map