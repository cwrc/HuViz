"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asynciterator_1 = require("asynciterator");
const ActorRdfResolveQuadPattern_1 = require("./ActorRdfResolveQuadPattern");
/**
 * A base implementation for rdf-resolve-quad-pattern events
 * that wraps around an RDFJS {@link RDF.Source}.
 *
 * @see RDF.Source
 */
class ActorRdfResolveQuadPatternSource extends ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern {
    constructor(args) {
        super(args);
    }
    static variableToNull(term) {
        if (term && term.termType === 'Variable') {
            return null;
        }
        return term;
    }
    async test(action) {
        return true;
    }
    async run(action) {
        const source = await this.getSource(action.context);
        const output = await this.getOutput(source, action.pattern, action.context);
        if (output.metadata) {
            output.metadata = ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern.cachifyMetadata(output.metadata);
        }
        return output;
    }
    /**
     * Get the output of the given action on a source.
     * @param {RDF.Source} source An RDFJS source, possibly lazy.
     * @param {RDF.BaseQuad} pattern The resolve action.
     * @param ActionContext context Optional context data.
     * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing
     *                                                      a data RDFJS stream and an optional metadata hash.
     */
    async getOutput(source, pattern, context) {
        if (source.matchLazy) {
            return { data: source.matchLazy(ActorRdfResolveQuadPatternSource.variableToNull(pattern.subject), ActorRdfResolveQuadPatternSource.variableToNull(pattern.predicate), ActorRdfResolveQuadPatternSource.variableToNull(pattern.object), ActorRdfResolveQuadPatternSource.variableToNull(pattern.graph)) };
        }
        return { data: 
            // TODO: AsyncIterator fix typings
            asynciterator_1.AsyncIterator.wrap(source.match(ActorRdfResolveQuadPatternSource.variableToNull(pattern.subject), ActorRdfResolveQuadPatternSource.variableToNull(pattern.predicate), ActorRdfResolveQuadPatternSource.variableToNull(pattern.object), ActorRdfResolveQuadPatternSource.variableToNull(pattern.graph))),
        };
    }
}
exports.ActorRdfResolveQuadPatternSource = ActorRdfResolveQuadPatternSource;
//# sourceMappingURL=ActorRdfResolveQuadPatternSource.js.map