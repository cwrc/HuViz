"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@comunica/core");
/**
 * A comunica actor for rdf-resolve-quad-pattern events.
 *
 * Actor types:
 * * Input:  IActionRdfResolveQuadPattern:      A quad pattern and an optional context.
 * * Test:   <none>
 * * Output: IActorRdfResolveQuadPatternOutput: The resulting quad stream and optional metadata.
 *
 * @see IActionRdfResolveQuadPattern
 * @see IActorRdfResolveQuadPatternOutput
 */
class ActorRdfResolveQuadPattern extends core_1.Actor {
    constructor(args) {
        super(args);
    }
    /**
     * Convert a metadata callback to a lazy callback where the response value is cached.
     * @param {() => Promise<{[p: string]: any}>} metadata A metadata callback
     * @return {() => Promise<{[p: string]: any}>} The callback where the response will be cached.
     */
    static cachifyMetadata(metadata) {
        let lastReturn = null;
        return () => (lastReturn || (lastReturn = metadata()));
    }
    /**
     * Get the sources from the given context.
     * @param {ActionContext} context An optional context.
     * @return {IDataSource[]} The array of sources or null.
     */
    getContextSources(context) {
        return context ? context.get(exports.KEY_CONTEXT_SOURCES) : null;
    }
    /**
     * Get the source from the given context.
     * @param {ActionContext} context An optional context.
     * @return {IDataSource} The source or null.
     */
    getContextSource(context) {
        return context ? context.get(exports.KEY_CONTEXT_SOURCE) : null;
    }
    /**
     * Get the source's raw URL value from the given context.
     * @param {ActionContext} context An optional context.
     * @return {string} The URL or null.
     */
    getContextSourceUrl(context) {
        const source = this.getContextSource(context);
        if (source) {
            let fileUrl = source.value;
            // Remove hashes from source
            const hashPosition = fileUrl.indexOf('#');
            if (hashPosition >= 0) {
                fileUrl = fileUrl.substr(0, hashPosition);
            }
            return fileUrl;
        }
        return null;
    }
    /**
     * Check if the given context has a single source of the given type.
     * @param {string} requiredType The required source type name.
     * @param {ActionContext} context An optional context.
     * @return {boolean} If the given context has a single source of the given type.
     */
    hasContextSingleSource(requiredType, context) {
        const source = this.getContextSource(context);
        return !!(source && source.type === requiredType && source.value);
    }
}
exports.ActorRdfResolveQuadPattern = ActorRdfResolveQuadPattern;
/**
 * @type {string} Context entry for data sources.
 * @value {DataSources} An array or stream of sources.
 */
exports.KEY_CONTEXT_SOURCES = '@comunica/bus-rdf-resolve-quad-pattern:sources';
/**
 * @type {string} Context entry for a data source.
 * @value {IDataSource} A source.
 */
exports.KEY_CONTEXT_SOURCE = '@comunica/bus-rdf-resolve-quad-pattern:source';
//# sourceMappingURL=ActorRdfResolveQuadPattern.js.map