import { ActionContext, IActorArgs, IActorTest } from "@comunica/core";
import { AsyncIterator } from "asynciterator";
import * as RDF from "rdf-js";
import { ActorRdfResolveQuadPattern, IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternOutput } from "./ActorRdfResolveQuadPattern";
/**
 * A base implementation for rdf-resolve-quad-pattern events
 * that wraps around an RDFJS {@link RDF.Source}.
 *
 * @see RDF.Source
 */
export declare abstract class ActorRdfResolveQuadPatternSource extends ActorRdfResolveQuadPattern {
    constructor(args: IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>);
    static variableToNull(term?: RDF.Term): RDF.Term;
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    run(action: IActionRdfResolveQuadPattern): Promise<IActorRdfResolveQuadPatternOutput>;
    /**
     * Get the output of the given action on a source.
     * @param {RDF.Source} source An RDFJS source, possibly lazy.
     * @param {RDF.BaseQuad} pattern The resolve action.
     * @param ActionContext context Optional context data.
     * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing
     *                                                      a data RDFJS stream and an optional metadata hash.
     */
    protected getOutput(source: ILazyQuadSource, pattern: RDF.BaseQuad, context: ActionContext): Promise<IActorRdfResolveQuadPatternOutput>;
    /**
     * Get a source instance for the given context.
     * @param ActionContext context Optional context data.
     * @return {Promise<RDF.Source>} A promise that resolves to a source.
     */
    protected abstract getSource(context: ActionContext): Promise<ILazyQuadSource>;
}
/**
 * A lazy quad source.
 *
 * This extends {@link RDF.Source} with an optional matchLazy method.
 * So non-lazy sources can also be used in this place.
 */
export interface ILazyQuadSource<Q extends RDF.BaseQuad = RDF.Quad> extends RDF.Source<Q> {
    /**
     * Returns a lazy stream that processes all quads matching the pattern.
     *
     * @param {RDF.Term | RegExp} subject   The optional exact subject or subject regex to match.
     * @param {RDF.Term | RegExp} predicate The optional exact predicate or predicate regex to match.
     * @param {RDF.Term | RegExp} object    The optional exact object or object regex to match.
     * @param {RDF.Term | RegExp} graph     The optional exact graph or graph regex to match.
     * @return {RDF.Stream} The resulting quad stream.
     */
    matchLazy?(subject?: RDF.Term | RegExp, predicate?: RDF.Term | RegExp, object?: RDF.Term | RegExp, graph?: RDF.Term | RegExp): AsyncIterator<Q> & RDF.Stream<Q>;
}
