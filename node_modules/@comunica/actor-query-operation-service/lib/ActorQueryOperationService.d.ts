import { ActorQueryOperationTypedMediated, IActorQueryOperationOutputBindings, IActorQueryOperationTypedMediatedArgs } from "@comunica/bus-query-operation";
import { IActionRdfSourceIdentifier, IActorRdfSourceIdentifierOutput } from "@comunica/bus-rdf-source-identifier";
import { ActionContext, Actor, IActorTest, Mediator } from "@comunica/core";
import { Algebra } from "sparqlalgebrajs";
/**
 * A comunica Service Query Operation Actor.
 * It unwraps the SERVICE operation and executes it on the given source.
 */
export declare class ActorQueryOperationService extends ActorQueryOperationTypedMediated<Algebra.Service> {
    readonly forceSparqlEndpoint: boolean;
    readonly mediatorRdfSourceIdentifier: Mediator<Actor<IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>, IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>;
    constructor(args: IActorQueryOperationServiceArgs);
    testOperation(pattern: Algebra.Service, context: ActionContext): Promise<IActorTest>;
    runOperation(pattern: Algebra.Service, context: ActionContext): Promise<IActorQueryOperationOutputBindings>;
}
export interface IActorQueryOperationServiceArgs extends IActorQueryOperationTypedMediatedArgs {
    forceSparqlEndpoint: boolean;
    mediatorRdfSourceIdentifier: Mediator<Actor<IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>, IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>;
}
