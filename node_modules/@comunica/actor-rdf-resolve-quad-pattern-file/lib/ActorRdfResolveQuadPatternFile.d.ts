import { ActorHttpInvalidateListenable } from "@comunica/bus-http-invalidate";
import { IActionRdfDereference, IActorRdfDereferenceOutput } from "@comunica/bus-rdf-dereference";
import { ActorRdfResolveQuadPatternSource, IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternOutput, ILazyQuadSource } from "@comunica/bus-rdf-resolve-quad-pattern";
import { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from "@comunica/core";
import * as LRUCache from "lru-cache";
import { N3Store } from "n3";
import * as RDF from "rdf-js";
/**
 * A comunica File RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveQuadPatternFile extends ActorRdfResolveQuadPatternSource implements IActorRdfResolveQuadPatternFileArgs {
    readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;
    readonly files?: string[];
    readonly cacheSize: number;
    readonly cache: LRUCache<string, Promise<N3Store>>;
    readonly httpInvalidator: ActorHttpInvalidateListenable;
    constructor(args: IActorRdfResolveQuadPatternFileArgs);
    initializeFile(file: string, context: ActionContext): Promise<any>;
    initialize(): Promise<any>;
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    protected getSource(context: ActionContext): Promise<ILazyQuadSource>;
    protected getOutput(source: RDF.Source, pattern: RDF.Quad, context: ActionContext): Promise<IActorRdfResolveQuadPatternOutput>;
}
export interface IActorRdfResolveQuadPatternFileArgs extends IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {
    /**
     * The mediator to use for dereferencing files.
     */
    mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;
    /**
     * The files to preload.
     */
    files?: string[];
    /**
     * The maximum number of files to be cached.
     */
    cacheSize: number;
    /**
     * An actor that listens to HTTP invalidation events
     */
    httpInvalidator: ActorHttpInvalidateListenable;
}
