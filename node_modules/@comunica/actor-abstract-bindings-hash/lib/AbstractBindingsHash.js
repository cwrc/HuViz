"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const crypto_1 = require("crypto");
/**
 * A comunica Hash Query Operation Actor.
 */
class AbstractBindingHash extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args, operator) {
        super(args, operator);
        if (!AbstractBindingHash.doesHashAlgorithmExist(this.hashAlgorithm)) {
            throw new Error("The given hash algorithm is not present in this version of Node: " + this.hashAlgorithm);
        }
        if (!AbstractBindingHash.doesDigestAlgorithmExist(this.digestAlgorithm)) {
            throw new Error("The given digest algorithm is not present in this version of Node: " + this.digestAlgorithm);
        }
    }
    /**
     * Check if the given hash algorithm (such as sha1) exists.
     * @param {string} hashAlgorithm A hash algorithm.
     * @return {boolean} If it exists.
     */
    static doesHashAlgorithmExist(hashAlgorithm) {
        return crypto_1.getHashes().indexOf(hashAlgorithm) >= 0;
    }
    /**
     * Check if the given digest (such as base64) algorithm exists.
     * @param {string} digestAlgorithm A digest algorithm.
     * @return {boolean} If it exists.
     */
    static doesDigestAlgorithmExist(digestAlgorithm) {
        return ["latin1", "hex", "base64"].indexOf(digestAlgorithm) >= 0;
    }
    /**
     * Create a string-based hash of the given object.
     * @param {string} hashAlgorithm A hash algorithm.
     * @param {string} digestAlgorithm A digest algorithm.
     * @param object The object to hash.
     * @return {string} The object's hash.
     */
    static hash(hashAlgorithm, digestAlgorithm, object) {
        const hash = crypto_1.createHash(hashAlgorithm);
        hash.update(require('json-stable-stringify')(object));
        return hash.digest(digestAlgorithm);
    }
    async testOperation(pattern, context) {
        return true;
    }
    async runOperation(pattern, context) {
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: pattern.input, context }));
        const bindingsStream = output.bindingsStream.filter(this.newHashFilter(this.hashAlgorithm, this.digestAlgorithm));
        return { type: 'bindings', bindingsStream, metadata: output.metadata, variables: output.variables };
    }
}
exports.AbstractBindingHash = AbstractBindingHash;
//# sourceMappingURL=AbstractBindingsHash.js.map