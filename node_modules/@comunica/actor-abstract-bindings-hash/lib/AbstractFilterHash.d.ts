import { ActorQueryOperationTypedMediated, IActorQueryOperationOutputBindings, IActorQueryOperationTypedMediatedArgs } from "@comunica/bus-query-operation";
import { ActionContext, IActorTest } from "@comunica/core";
import { Algebra } from "sparqlalgebrajs";
/**
 * A comunica Hash Query Operation Actor.
 */
export declare abstract class AbstractFilterHash<T extends Algebra.Operation> extends ActorQueryOperationTypedMediated<T> implements IActorInitRdfDereferencePagedArgs {
    readonly hashAlgorithm: string;
    readonly digestAlgorithm: string;
    constructor(args: IActorInitRdfDereferencePagedArgs, operator: string);
    /**
     * Check if the given hash algorithm (such as sha1) exists.
     * @param {string} hashAlgorithm A hash algorithm.
     * @return {boolean} If it exists.
     */
    static doesHashAlgorithmExist(hashAlgorithm: string): boolean;
    /**
     * Check if the given digest (such as base64) algorithm exists.
     * @param {string} digestAlgorithm A digest algorithm.
     * @return {boolean} If it exists.
     */
    static doesDigestAlgorithmExist(digestAlgorithm: string): boolean;
    /**
     * Create a string-based hash of the given object.
     * @param {string} hashAlgorithm A hash algorithm.
     * @param {string} digestAlgorithm A digest algorithm.
     * @param object The object to hash.
     * @return {string} The object's hash.
     */
    static hash(hashAlgorithm: string, digestAlgorithm: string, object: any): string;
    testOperation(pattern: T, context: ActionContext): Promise<IActorTest>;
    abstract runOperation(pattern: T, context: ActionContext): Promise<IActorQueryOperationOutputBindings>;
}
export interface IActorInitRdfDereferencePagedArgs extends IActorQueryOperationTypedMediatedArgs {
    hashAlgorithm: string;
    digestAlgorithm: string;
}
