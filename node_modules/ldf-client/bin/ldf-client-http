#!/usr/bin/env node
/*! @license MIT Â©2013-2016 Ruben Verborgh, Ghent University - imec */
/* HTTP server that executes SPARQL queries over triple pattern fragments. */

var path = require('path'),
    http = require('http'),
    url = require('url'),
    querystring = require('querystring'),
    spawn = require('child_process').spawn,
    Negotiator = require('negotiator');

var clientPath = path.join(__dirname, 'ldf-client');

var availableMimeTypes = getAvailableMimeTypes();
var MIME_PLAIN  = 'text/plain',
    MIME_TURTLE = 'text/turtle',
    MIME_JSON   = 'application/json';

// Retrieve and check arguments
var args = require('minimist')(process.argv.slice(2));
if (!args._.length || args.h || args.help) {
  console.error('usage: ldf-client-http startFragment1 [startFragment2 ...] [-c config.json] [-p port] [-t timeout] [--help]');
  return process.exit(1);
}
var node = process.argv[0],
    startFragments = args._,
    port = parseInt(args.p, 10) || 3000,
    timeout = (parseInt(args.t, 10) || 60) * 1000,
    configFile = args.c || path.join(__dirname, '../config-default.json'),
    clientArgs = [clientPath, '-c', configFile].concat(startFragments),
    ioSettings = { stdio: ['ignore', 'pipe', 'pipe'] };

// Start the server
var server = http.createServer(handleRequest);
server.listen(port);
server.setTimeout(2 * timeout); // unreliable mechanism, set too high on purpose
console.error('Server running on http://localhost:' + port + '/');

// Handles an HTTP request
function handleRequest(request, response) {
  // Verify the path
  var requestUrl = url.parse(request.url, true);
  if (requestUrl.pathname !== '/sparql') {
    console.log('[404] Resource not found');
    response.writeHead(404, { 'content-type': MIME_JSON });
    response.end(JSON.stringify({ message: 'Resource not found' }));
    return;
  }

  // Parse the query, depending on the HTTP method
  switch (request.method) {
  case 'POST':
    return parseBody(request, function (query) { writeQueryResult(request, response, query); });
  case 'GET':
    return writeQueryResult(request, response, requestUrl.query.query || '');
  default:
    console.log('[405] ' + request.method + ' to ' + requestUrl);
    response.writeHead(405, { 'content-type': MIME_JSON });
    response.end(JSON.stringify({ message: 'Incorrect HTTP method' }));
  }
}

// Writes the result of the given SPARQL query
function writeQueryResult(request, response, query) {
  // Get the results of the query from the client
  var hasTriplesResult = /\s*(?:CONSTRUCT|DESCRIBE)/i.test(query),
      mimeType = hasTriplesResult ? MIME_TURTLE : new Negotiator(request).mediaType(availableMimeTypes),
      client = spawn(node, clientArgs.concat(['-t', mimeType, '-q', query]), ioSettings);

  // Write a successful data response
  client.stdout.setEncoding('utf8');
  client.stdout.once('data', function (data) {
    if (!response.headersSent) {
      console.log('[200] ' + request.method + ' to ' + request.url);
      console.log('      Received query: ' + query);
      response.writeHead(200, { 'content-type': mimeType });
      response.write(data);
      client.stdout.pipe(response);
    }
  });

  // Write an error response
  client.stderr.setEncoding('utf8');
  client.stderr.once('data', function (data) {
    if (!response.headersSent) {
      console.log('[400] Bad request');
      response.writeHead(400, { 'content-type': MIME_PLAIN });
      response.write(data);
      client.stderr.pipe(response);
    }
  });

  // End the response if all streams have ended
  var ended = false;
  client.stdout.on('end', function () { ended ? response.end() : ended = true; });
  client.stderr.on('end', function () { ended ? response.end() : ended = true; });

  // Stop after timeout, and kill the client if the connection is terminated
  // Note: socket or response timeouts seemed unreliable, hence the explicit timeout
  var killTimeout = setTimeout(killClient, timeout);
  response.on('close', killClient);
  function killClient() {
    try { response.end(); }
    catch (e) { /* ignore error */ }
    client.kill('SIGKILL');
    clearTimeout(killTimeout);
  }
}

// Parses the body of a SPARQL POST request
function parseBody(request, callback) {
  var body = '';
  request.setEncoding('utf8');
  request.on('data', function (chunk) { body += chunk; });
  request.on('end', function () {
    switch (request.headers['content-type']) {
    case 'application/sparql-query':
      return callback(body);
    case 'application/x-www-form-urlencoded':
      return callback(querystring.parse(body).query || '');
    default:
      return callback('');
    }
  });
}

// Retrieves the MIME types supported by the client
function getAvailableMimeTypes() {
  var client = spawn(process.argv[0], [clientPath, '--listformats']), data = '', mimeTypes = [];
  client.stdout.setEncoding('utf8');
  client.stdout.on('data', function (chunk) { data += chunk; });
  client.stdout.on('end',  function () { mimeTypes.push.apply(mimeTypes, data.trim().split('\n')); });
  return mimeTypes;
}
